'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mongodb = require('mongodb');

var _mongodb2 = _interopRequireDefault(_mongodb);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_bluebird2.default.promisifyAll(_mongodb2.default);

var MongoAsync = function () {
  function MongoAsync() {
    _classCallCheck(this, MongoAsync);

    this._instances = {};
  }

  _createClass(MongoAsync, [{
    key: 'connect',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(arg) {
        var url, name;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = void 0, name = void 0;


                if (typeof arg === 'string') {
                  url = arg;
                  name = 'default';
                } else {
                  url = arg.url;
                  name = arg.name || 'default';
                }

                _context.next = 4;
                return _mongodb2.default.connectAsync(url);

              case 4:
                this._instances[name] = _context.sent;
                return _context.abrupt('return', this._instances[name]);

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connect(_x) {
        return ref.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: 'db',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var connection = arguments.length <= 0 || arguments[0] === undefined ? 'default' : arguments[0];
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this._instances[connection]) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('Not connected to database ' + connection);

              case 2:
                return _context2.abrupt('return', this._instances[connection]);

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function db(_x2) {
        return ref.apply(this, arguments);
      }

      return db;
    }()
  }, {
    key: 'collection',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(name, connection) {
        var db;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.db(connection);

              case 2:
                db = _context3.sent;
                return _context3.abrupt('return', db.collection(name));

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function collection(_x4, _x5) {
        return ref.apply(this, arguments);
      }

      return collection;
    }()
  }]);

  return MongoAsync;
}();

exports.default = MongoAsync;
;