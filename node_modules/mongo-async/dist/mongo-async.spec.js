'use strict';

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _mongodb = require('mongodb');

var _mongodb2 = _interopRequireDefault(_mongodb);

var _mongoAsync = require('./mongo-async');

var _mongoAsync2 = _interopRequireDefault(_mongoAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var expect = _chai2.default.expect;

describe('mongo-async', function () {
  var mongo = void 0;

  beforeEach(function () {
    mongo = new _mongoAsync2.default();
    _sinon2.default.stub(_mongodb2.default, 'connectAsync');
  });

  afterEach(function () {
    _mongodb2.default.connectAsync.restore();
  });

  describe('#connect', function () {
    beforeEach(function () {
      _mongodb2.default.connectAsync.returns('connected');
    });
    describe('when argument is a string', function () {
      it('should use the argument as the url', function (next) {
        mongo.connect('test').then(function () {
          return expect(_mongodb2.default.connectAsync.args[0][0]).to.equal('test');
        }).then(function () {
          return next();
        }).catch(next);
      });
      it('should use default as the instance name', function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(next) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  mongo.connect('test').then(function () {
                    return expect(mongo._instances['default']).to.equal('connected');
                  }).then(function () {
                    return next();
                  }).catch(next);

                case 1:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, undefined);
        }));

        return function (_x) {
          return ref.apply(this, arguments);
        };
      }());
    });
    describe('when argument is an object', function () {
      it('should use the url property', function (next) {
        mongo.connect({ url: 'test' }).then(function () {
          return expect(_mongodb2.default.connectAsync.args[0][0]).to.equal('test');
        }).then(function () {
          return next();
        }).catch(next);
      });
      describe('when name property supplied', function () {
        it('should use the name as the instance', function (next) {
          mongo.connect({ url: 'test', name: 'instance' }).then(function () {
            return expect(mongo._instances['instance']).to.equal('connected');
          }).then(function () {
            return next();
          }).catch(next);
        });
      });
      describe('when name property not supplied', function () {
        it('should use the default instance', function (next) {
          mongo.connect({ url: 'test' }).then(function () {
            return expect(mongo._instances['default']).to.equal('connected');
          }).then(function () {
            return next();
          }).catch(next);
        });
      });
    });
  });

  describe('#db', function () {
    describe('when no argument', function () {
      it('should return the default instance', function (next) {
        mongo._instances['default'] = 'connected';
        mongo.db().then(function (db) {
          return expect(db).to.equal('connected');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
    describe('when name argument supplied', function () {
      it('should return the instance with that name', function (next) {
        mongo._instances['named'] = 'connected';
        mongo.db('named').then(function (db) {
          return expect(db).to.equal('connected');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
    describe('when instance doesnt exist', function () {
      it('should throw an execption', function (next) {
        mongo.db('named').then(function () {
          throw new Error('Should not get here');
        }).catch(function (err) {
          return expect(err.message).to.equal('Not connected to database named');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
  });

  describe('#collection', function () {
    describe('when connection doesnt exist', function () {
      it('should throw an exception', function (next) {
        mongo.collection('items').then(function () {
          throw new Error('Should not get here');
        }).catch(function (err) {
          return expect(err.message).to.equal('Not connected to database default');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
    describe('when no connection supplied', function () {
      it('should use default connection', function (next) {
        var db = { collection: _sinon2.default.stub() };
        mongo._instances['default'] = db;
        mongo.collection('items').then(function () {
          return expect(db.collection.args[0][0]).to.equal('items');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
    describe('when named connection used', function () {
      it('should use the named connection', function (next) {
        var db = { collection: _sinon2.default.stub() };
        mongo._instances['named'] = db;
        mongo.collection('items', 'named').then(function () {
          return expect(db.collection.args[0][0]).to.equal('items');
        }).then(function () {
          return next();
        }).catch(next);
      });
    });
    it('it should return the collection', function (next) {
      var db = { collection: _sinon2.default.stub().returns('items') };
      mongo._instances['default'] = db;
      mongo.collection('items').then(function (collection) {
        return expect(collection).to.equal('items');
      }).then(function () {
        return next();
      }).catch(next);
    });
  });
});